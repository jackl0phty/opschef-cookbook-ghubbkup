#!/usr/bin/env ruby

# Include required libraries.
require 'rubygems'
require 'optparse'
require 'github_api'

# Declare variables.
CONFDIR = '/etc/ghubbkup.conf'
github_user = ''
github_pass = ''
REPOLIST = '/tmp/repos.txt'
REPOLIST2 = '/tmp/repos2.txt'
BACKUPDIR = '/tmp/github_repos_backup'
GITEXTENSION = '.git'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: chefknife COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     all: Backups ALL Git repos on Github under a single user account."
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-h","--help","help") do
    puts opt_parser
  end
end

opt_parser.parse!

def clone_repos()

  repos = []

  # Get Github user & pass.
  github_user = get_user_basic_auth()
  github_pass = get_pass_basic_auth()

  # Remove white from creds.
  github_user.strip!
  github_pass.strip!

  # Uncomment to debug.
  #puts "Github user: #{github_user}"
  #puts "Github pass: #{github_pass}" 

# Get repo list.
  #github = Github.new oauth_token: `git config github.token`
  github = Github.new basic_auth: "#{github_user}:#{github_pass}"
  repos = Github.repos.list user: "#{github_user}", auto_pagination: true

  # Write repos to file.
  File.open("#{REPOLIST}", 'w') { |file| file.write("#{repos}") }

  # Run fold on list to break on space.
  system("fold -s /tmp/repos.txt > #{REPOLIST2}")

  # Get the actual repo list.
  repos = `cat #{REPOLIST2} |grep '^url='`

  # Clean up repo list.
  repos.gsub!(/^url="https:\/\/api.github.com\/repos\/#{github_user}\//,'')
  repos.gsub!(/"\swatchers=\d+/,'')
  repos.gsub!(/"/,'')
  repos.gsub!(/=\d+>,/,'')

  # Print repo list.
  repos.split(/\n/).each do |repo|
  
    # Build git clone command.
    github_user.strip
    github_user.strip!
    repo.strip
    repo.strip!
    git_cmd = "git clone --progress git@github.com:#{github_user}/#{repo}#{GITEXTENSION} #{BACKUPDIR}/#{repo}"
    #git_cmd = git_cmd.gsub(/[[:space:]]/,'')

    # Clone repo list to BACKUPDIR.
    system("#{git_cmd}")

    # Uncomment to debug.
    puts "#{repo}"
    puts "Git command: #{git_cmd}"

  end

end

def get_user_basic_auth

  # Get github user from config.
  github_user = `cat #{CONFDIR} |grep github_user`
  github_user.slice! "github_user~~"

  # Uncomment to debug.
  #puts "Github user: #{github_user}"

  # Return Github user. 
  return github_user

end

def get_pass_basic_auth

  # Get github password from config.
  github_pass = `cat #{CONFDIR} |grep github_pass`
  github_pass.slice! "github_pass~~"

  # Uncomment to debug.
  #puts "Github password: #{github_pass}"

  # Return Github password.
  return github_pass

end

case ARGV[0]

when "all"

  # Get Github creds & Clone ALL repos.
  clone_repos

else
  puts opt_parser
end
